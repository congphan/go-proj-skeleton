// generated by "charlatan -dir=/home/congphan/Golang/src/github.com/congphan/go-prj-skeleton/app/domain/repo -output=/home/congphan/Golang/src/github.com/congphan/go-prj-skeleton/app/domain/repo/mock/mock.go -package=mock UserRepo AccountRepo TransactionRepo".  DO NOT EDIT.

package mock

import "reflect"
import "go-prj-skeleton/app/domain/model"

// UserRepoFindByIDInvocation represents a single call of FakeUserRepo.FindByID
type UserRepoFindByIDInvocation struct {
	Parameters struct {
		Id uint
	}
	Results struct {
		Ident1 model.User
		Ident2 error
	}
}

// NewUserRepoFindByIDInvocation creates a new instance of UserRepoFindByIDInvocation
func NewUserRepoFindByIDInvocation(id uint, ident1 model.User, ident2 error) *UserRepoFindByIDInvocation {
	invocation := new(UserRepoFindByIDInvocation)

	invocation.Parameters.Id = id

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// UserRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type UserRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeUserRepo is a mock implementation of UserRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithUserRepo(t *testing.T) {
		f := &mock.FakeUserRepo{
			FindByIDHook: func(id uint) (ident1 model.User, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByID ...
		f.AssertFindByIDCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByID.
*/
type FakeUserRepo struct {
	FindByIDHook func(uint) (model.User, error)

	FindByIDCalls []*UserRepoFindByIDInvocation
}

// NewFakeUserRepoDefaultPanic returns an instance of FakeUserRepo with all hooks configured to panic
func NewFakeUserRepoDefaultPanic() *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			panic("Unexpected call to UserRepo.FindByID")
		},
	}
}

// NewFakeUserRepoDefaultFatal returns an instance of FakeUserRepo with all hooks configured to call t.Fatal
func NewFakeUserRepoDefaultFatal(t_sym1 UserRepoTestingT) *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			t_sym1.Fatal("Unexpected call to UserRepo.FindByID")
			return
		},
	}
}

// NewFakeUserRepoDefaultError returns an instance of FakeUserRepo with all hooks configured to call t.Error
func NewFakeUserRepoDefaultError(t_sym2 UserRepoTestingT) *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			t_sym2.Error("Unexpected call to UserRepo.FindByID")
			return
		},
	}
}

func (f *FakeUserRepo) Reset() {
	f.FindByIDCalls = []*UserRepoFindByIDInvocation{}
}

func (f_sym3 *FakeUserRepo) FindByID(id uint) (ident1 model.User, ident2 error) {
	if f_sym3.FindByIDHook == nil {
		panic("UserRepo.FindByID() called but FakeUserRepo.FindByIDHook is nil")
	}

	invocation_sym3 := new(UserRepoFindByIDInvocation)
	f_sym3.FindByIDCalls = append(f_sym3.FindByIDCalls, invocation_sym3)

	invocation_sym3.Parameters.Id = id

	ident1, ident2 = f_sym3.FindByIDHook(id)

	invocation_sym3.Results.Ident1 = ident1
	invocation_sym3.Results.Ident2 = ident2

	return
}

// SetFindByIDStub configures UserRepo.FindByID to always return the given values
func (f_sym4 *FakeUserRepo) SetFindByIDStub(ident1 model.User, ident2 error) {
	f_sym4.FindByIDHook = func(uint) (model.User, error) {
		return ident1, ident2
	}
}

// SetFindByIDInvocation configures UserRepo.FindByID to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym5 *FakeUserRepo) SetFindByIDInvocation(calls_sym5 []*UserRepoFindByIDInvocation, fallback_sym5 func() (model.User, error)) {
	f_sym5.FindByIDHook = func(id uint) (ident1 model.User, ident2 error) {
		for _, call_sym5 := range calls_sym5 {
			if reflect.DeepEqual(call_sym5.Parameters.Id, id) {
				ident1 = call_sym5.Results.Ident1
				ident2 = call_sym5.Results.Ident2

				return
			}
		}

		return fallback_sym5()
	}
}

// FindByIDCalled returns true if FakeUserRepo.FindByID was called
func (f *FakeUserRepo) FindByIDCalled() bool {
	return len(f.FindByIDCalls) != 0
}

// AssertFindByIDCalled calls t.Error if FakeUserRepo.FindByID was not called
func (f *FakeUserRepo) AssertFindByIDCalled(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) == 0 {
		t.Error("FakeUserRepo.FindByID not called, expected at least one")
	}
}

// FindByIDNotCalled returns true if FakeUserRepo.FindByID was not called
func (f *FakeUserRepo) FindByIDNotCalled() bool {
	return len(f.FindByIDCalls) == 0
}

// AssertFindByIDNotCalled calls t.Error if FakeUserRepo.FindByID was called
func (f *FakeUserRepo) AssertFindByIDNotCalled(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 0 {
		t.Error("FakeUserRepo.FindByID called, expected none")
	}
}

// FindByIDCalledOnce returns true if FakeUserRepo.FindByID was called exactly once
func (f *FakeUserRepo) FindByIDCalledOnce() bool {
	return len(f.FindByIDCalls) == 1
}

// AssertFindByIDCalledOnce calls t.Error if FakeUserRepo.FindByID was not called exactly once
func (f *FakeUserRepo) AssertFindByIDCalledOnce(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 1 {
		t.Errorf("FakeUserRepo.FindByID called %d times, expected 1", len(f.FindByIDCalls))
	}
}

// FindByIDCalledN returns true if FakeUserRepo.FindByID was called at least n times
func (f *FakeUserRepo) FindByIDCalledN(n int) bool {
	return len(f.FindByIDCalls) >= n
}

// AssertFindByIDCalledN calls t.Error if FakeUserRepo.FindByID was called less than n times
func (f *FakeUserRepo) AssertFindByIDCalledN(t UserRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByIDCalls) < n {
		t.Errorf("FakeUserRepo.FindByID called %d times, expected >= %d", len(f.FindByIDCalls), n)
	}
}

// FindByIDCalledWith returns true if FakeUserRepo.FindByID was called with the given values
func (f_sym6 *FakeUserRepo) FindByIDCalledWith(id uint) bool {
	for _, call_sym6 := range f_sym6.FindByIDCalls {
		if reflect.DeepEqual(call_sym6.Parameters.Id, id) {
			return true
		}
	}

	return false
}

// AssertFindByIDCalledWith calls t.Error if FakeUserRepo.FindByID was not called with the given values
func (f_sym7 *FakeUserRepo) AssertFindByIDCalledWith(t UserRepoTestingT, id uint) {
	t.Helper()
	var found_sym7 bool
	for _, call_sym7 := range f_sym7.FindByIDCalls {
		if reflect.DeepEqual(call_sym7.Parameters.Id, id) {
			found_sym7 = true
			break
		}
	}

	if !found_sym7 {
		t.Error("FakeUserRepo.FindByID not called with expected parameters")
	}
}

// FindByIDCalledOnceWith returns true if FakeUserRepo.FindByID was called exactly once with the given values
func (f_sym8 *FakeUserRepo) FindByIDCalledOnceWith(id uint) bool {
	var count_sym8 int
	for _, call_sym8 := range f_sym8.FindByIDCalls {
		if reflect.DeepEqual(call_sym8.Parameters.Id, id) {
			count_sym8++
		}
	}

	return count_sym8 == 1
}

// AssertFindByIDCalledOnceWith calls t.Error if FakeUserRepo.FindByID was not called exactly once with the given values
func (f_sym9 *FakeUserRepo) AssertFindByIDCalledOnceWith(t UserRepoTestingT, id uint) {
	t.Helper()
	var count_sym9 int
	for _, call_sym9 := range f_sym9.FindByIDCalls {
		if reflect.DeepEqual(call_sym9.Parameters.Id, id) {
			count_sym9++
		}
	}

	if count_sym9 != 1 {
		t.Errorf("FakeUserRepo.FindByID called %d times with expected parameters, expected one", count_sym9)
	}
}

// FindByIDResultsForCall returns the result values for the first call to FakeUserRepo.FindByID with the given values
func (f_sym10 *FakeUserRepo) FindByIDResultsForCall(id uint) (ident1 model.User, ident2 error, found_sym10 bool) {
	for _, call_sym10 := range f_sym10.FindByIDCalls {
		if reflect.DeepEqual(call_sym10.Parameters.Id, id) {
			ident1 = call_sym10.Results.Ident1
			ident2 = call_sym10.Results.Ident2
			found_sym10 = true
			break
		}
	}

	return
}

// AccountRepoFindByUserInvocation represents a single call of FakeAccountRepo.FindByUser
type AccountRepoFindByUserInvocation struct {
	Parameters struct {
		UserID uint
	}
	Results struct {
		Ident1 []model.Account
		Ident2 error
	}
}

// NewAccountRepoFindByUserInvocation creates a new instance of AccountRepoFindByUserInvocation
func NewAccountRepoFindByUserInvocation(userID uint, ident1 []model.Account, ident2 error) *AccountRepoFindByUserInvocation {
	invocation := new(AccountRepoFindByUserInvocation)

	invocation.Parameters.UserID = userID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// AccountRepoFindByIDInvocation represents a single call of FakeAccountRepo.FindByID
type AccountRepoFindByIDInvocation struct {
	Parameters struct {
		Id uint
	}
	Results struct {
		Ident1 model.Account
		Ident2 error
	}
}

// NewAccountRepoFindByIDInvocation creates a new instance of AccountRepoFindByIDInvocation
func NewAccountRepoFindByIDInvocation(id uint, ident1 model.Account, ident2 error) *AccountRepoFindByIDInvocation {
	invocation := new(AccountRepoFindByIDInvocation)

	invocation.Parameters.Id = id

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// AccountRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type AccountRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeAccountRepo is a mock implementation of AccountRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithAccountRepo(t *testing.T) {
		f := &mock.FakeAccountRepo{
			FindByUserHook: func(userID uint) (ident1 []model.Account, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByUser ...
		f.AssertFindByUserCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByUser.
*/
type FakeAccountRepo struct {
	FindByUserHook func(uint) ([]model.Account, error)
	FindByIDHook   func(uint) (model.Account, error)

	FindByUserCalls []*AccountRepoFindByUserInvocation
	FindByIDCalls   []*AccountRepoFindByIDInvocation
}

// NewFakeAccountRepoDefaultPanic returns an instance of FakeAccountRepo with all hooks configured to panic
func NewFakeAccountRepoDefaultPanic() *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			panic("Unexpected call to AccountRepo.FindByUser")
		},
		FindByIDHook: func(uint) (ident1 model.Account, ident2 error) {
			panic("Unexpected call to AccountRepo.FindByID")
		},
	}
}

// NewFakeAccountRepoDefaultFatal returns an instance of FakeAccountRepo with all hooks configured to call t.Fatal
func NewFakeAccountRepoDefaultFatal(t_sym11 AccountRepoTestingT) *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			t_sym11.Fatal("Unexpected call to AccountRepo.FindByUser")
			return
		},
		FindByIDHook: func(uint) (ident1 model.Account, ident2 error) {
			t_sym11.Fatal("Unexpected call to AccountRepo.FindByID")
			return
		},
	}
}

// NewFakeAccountRepoDefaultError returns an instance of FakeAccountRepo with all hooks configured to call t.Error
func NewFakeAccountRepoDefaultError(t_sym12 AccountRepoTestingT) *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			t_sym12.Error("Unexpected call to AccountRepo.FindByUser")
			return
		},
		FindByIDHook: func(uint) (ident1 model.Account, ident2 error) {
			t_sym12.Error("Unexpected call to AccountRepo.FindByID")
			return
		},
	}
}

func (f *FakeAccountRepo) Reset() {
	f.FindByUserCalls = []*AccountRepoFindByUserInvocation{}
	f.FindByIDCalls = []*AccountRepoFindByIDInvocation{}
}

func (f_sym13 *FakeAccountRepo) FindByUser(userID uint) (ident1 []model.Account, ident2 error) {
	if f_sym13.FindByUserHook == nil {
		panic("AccountRepo.FindByUser() called but FakeAccountRepo.FindByUserHook is nil")
	}

	invocation_sym13 := new(AccountRepoFindByUserInvocation)
	f_sym13.FindByUserCalls = append(f_sym13.FindByUserCalls, invocation_sym13)

	invocation_sym13.Parameters.UserID = userID

	ident1, ident2 = f_sym13.FindByUserHook(userID)

	invocation_sym13.Results.Ident1 = ident1
	invocation_sym13.Results.Ident2 = ident2

	return
}

// SetFindByUserStub configures AccountRepo.FindByUser to always return the given values
func (f_sym14 *FakeAccountRepo) SetFindByUserStub(ident1 []model.Account, ident2 error) {
	f_sym14.FindByUserHook = func(uint) ([]model.Account, error) {
		return ident1, ident2
	}
}

// SetFindByUserInvocation configures AccountRepo.FindByUser to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym15 *FakeAccountRepo) SetFindByUserInvocation(calls_sym15 []*AccountRepoFindByUserInvocation, fallback_sym15 func() ([]model.Account, error)) {
	f_sym15.FindByUserHook = func(userID uint) (ident1 []model.Account, ident2 error) {
		for _, call_sym15 := range calls_sym15 {
			if reflect.DeepEqual(call_sym15.Parameters.UserID, userID) {
				ident1 = call_sym15.Results.Ident1
				ident2 = call_sym15.Results.Ident2

				return
			}
		}

		return fallback_sym15()
	}
}

// FindByUserCalled returns true if FakeAccountRepo.FindByUser was called
func (f *FakeAccountRepo) FindByUserCalled() bool {
	return len(f.FindByUserCalls) != 0
}

// AssertFindByUserCalled calls t.Error if FakeAccountRepo.FindByUser was not called
func (f *FakeAccountRepo) AssertFindByUserCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) == 0 {
		t.Error("FakeAccountRepo.FindByUser not called, expected at least one")
	}
}

// FindByUserNotCalled returns true if FakeAccountRepo.FindByUser was not called
func (f *FakeAccountRepo) FindByUserNotCalled() bool {
	return len(f.FindByUserCalls) == 0
}

// AssertFindByUserNotCalled calls t.Error if FakeAccountRepo.FindByUser was called
func (f *FakeAccountRepo) AssertFindByUserNotCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 0 {
		t.Error("FakeAccountRepo.FindByUser called, expected none")
	}
}

// FindByUserCalledOnce returns true if FakeAccountRepo.FindByUser was called exactly once
func (f *FakeAccountRepo) FindByUserCalledOnce() bool {
	return len(f.FindByUserCalls) == 1
}

// AssertFindByUserCalledOnce calls t.Error if FakeAccountRepo.FindByUser was not called exactly once
func (f *FakeAccountRepo) AssertFindByUserCalledOnce(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 1 {
		t.Errorf("FakeAccountRepo.FindByUser called %d times, expected 1", len(f.FindByUserCalls))
	}
}

// FindByUserCalledN returns true if FakeAccountRepo.FindByUser was called at least n times
func (f *FakeAccountRepo) FindByUserCalledN(n int) bool {
	return len(f.FindByUserCalls) >= n
}

// AssertFindByUserCalledN calls t.Error if FakeAccountRepo.FindByUser was called less than n times
func (f *FakeAccountRepo) AssertFindByUserCalledN(t AccountRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserCalls) < n {
		t.Errorf("FakeAccountRepo.FindByUser called %d times, expected >= %d", len(f.FindByUserCalls), n)
	}
}

// FindByUserCalledWith returns true if FakeAccountRepo.FindByUser was called with the given values
func (f_sym16 *FakeAccountRepo) FindByUserCalledWith(userID uint) bool {
	for _, call_sym16 := range f_sym16.FindByUserCalls {
		if reflect.DeepEqual(call_sym16.Parameters.UserID, userID) {
			return true
		}
	}

	return false
}

// AssertFindByUserCalledWith calls t.Error if FakeAccountRepo.FindByUser was not called with the given values
func (f_sym17 *FakeAccountRepo) AssertFindByUserCalledWith(t AccountRepoTestingT, userID uint) {
	t.Helper()
	var found_sym17 bool
	for _, call_sym17 := range f_sym17.FindByUserCalls {
		if reflect.DeepEqual(call_sym17.Parameters.UserID, userID) {
			found_sym17 = true
			break
		}
	}

	if !found_sym17 {
		t.Error("FakeAccountRepo.FindByUser not called with expected parameters")
	}
}

// FindByUserCalledOnceWith returns true if FakeAccountRepo.FindByUser was called exactly once with the given values
func (f_sym18 *FakeAccountRepo) FindByUserCalledOnceWith(userID uint) bool {
	var count_sym18 int
	for _, call_sym18 := range f_sym18.FindByUserCalls {
		if reflect.DeepEqual(call_sym18.Parameters.UserID, userID) {
			count_sym18++
		}
	}

	return count_sym18 == 1
}

// AssertFindByUserCalledOnceWith calls t.Error if FakeAccountRepo.FindByUser was not called exactly once with the given values
func (f_sym19 *FakeAccountRepo) AssertFindByUserCalledOnceWith(t AccountRepoTestingT, userID uint) {
	t.Helper()
	var count_sym19 int
	for _, call_sym19 := range f_sym19.FindByUserCalls {
		if reflect.DeepEqual(call_sym19.Parameters.UserID, userID) {
			count_sym19++
		}
	}

	if count_sym19 != 1 {
		t.Errorf("FakeAccountRepo.FindByUser called %d times with expected parameters, expected one", count_sym19)
	}
}

// FindByUserResultsForCall returns the result values for the first call to FakeAccountRepo.FindByUser with the given values
func (f_sym20 *FakeAccountRepo) FindByUserResultsForCall(userID uint) (ident1 []model.Account, ident2 error, found_sym20 bool) {
	for _, call_sym20 := range f_sym20.FindByUserCalls {
		if reflect.DeepEqual(call_sym20.Parameters.UserID, userID) {
			ident1 = call_sym20.Results.Ident1
			ident2 = call_sym20.Results.Ident2
			found_sym20 = true
			break
		}
	}

	return
}

func (f_sym21 *FakeAccountRepo) FindByID(id uint) (ident1 model.Account, ident2 error) {
	if f_sym21.FindByIDHook == nil {
		panic("AccountRepo.FindByID() called but FakeAccountRepo.FindByIDHook is nil")
	}

	invocation_sym21 := new(AccountRepoFindByIDInvocation)
	f_sym21.FindByIDCalls = append(f_sym21.FindByIDCalls, invocation_sym21)

	invocation_sym21.Parameters.Id = id

	ident1, ident2 = f_sym21.FindByIDHook(id)

	invocation_sym21.Results.Ident1 = ident1
	invocation_sym21.Results.Ident2 = ident2

	return
}

// SetFindByIDStub configures AccountRepo.FindByID to always return the given values
func (f_sym22 *FakeAccountRepo) SetFindByIDStub(ident1 model.Account, ident2 error) {
	f_sym22.FindByIDHook = func(uint) (model.Account, error) {
		return ident1, ident2
	}
}

// SetFindByIDInvocation configures AccountRepo.FindByID to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym23 *FakeAccountRepo) SetFindByIDInvocation(calls_sym23 []*AccountRepoFindByIDInvocation, fallback_sym23 func() (model.Account, error)) {
	f_sym23.FindByIDHook = func(id uint) (ident1 model.Account, ident2 error) {
		for _, call_sym23 := range calls_sym23 {
			if reflect.DeepEqual(call_sym23.Parameters.Id, id) {
				ident1 = call_sym23.Results.Ident1
				ident2 = call_sym23.Results.Ident2

				return
			}
		}

		return fallback_sym23()
	}
}

// FindByIDCalled returns true if FakeAccountRepo.FindByID was called
func (f *FakeAccountRepo) FindByIDCalled() bool {
	return len(f.FindByIDCalls) != 0
}

// AssertFindByIDCalled calls t.Error if FakeAccountRepo.FindByID was not called
func (f *FakeAccountRepo) AssertFindByIDCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) == 0 {
		t.Error("FakeAccountRepo.FindByID not called, expected at least one")
	}
}

// FindByIDNotCalled returns true if FakeAccountRepo.FindByID was not called
func (f *FakeAccountRepo) FindByIDNotCalled() bool {
	return len(f.FindByIDCalls) == 0
}

// AssertFindByIDNotCalled calls t.Error if FakeAccountRepo.FindByID was called
func (f *FakeAccountRepo) AssertFindByIDNotCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 0 {
		t.Error("FakeAccountRepo.FindByID called, expected none")
	}
}

// FindByIDCalledOnce returns true if FakeAccountRepo.FindByID was called exactly once
func (f *FakeAccountRepo) FindByIDCalledOnce() bool {
	return len(f.FindByIDCalls) == 1
}

// AssertFindByIDCalledOnce calls t.Error if FakeAccountRepo.FindByID was not called exactly once
func (f *FakeAccountRepo) AssertFindByIDCalledOnce(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 1 {
		t.Errorf("FakeAccountRepo.FindByID called %d times, expected 1", len(f.FindByIDCalls))
	}
}

// FindByIDCalledN returns true if FakeAccountRepo.FindByID was called at least n times
func (f *FakeAccountRepo) FindByIDCalledN(n int) bool {
	return len(f.FindByIDCalls) >= n
}

// AssertFindByIDCalledN calls t.Error if FakeAccountRepo.FindByID was called less than n times
func (f *FakeAccountRepo) AssertFindByIDCalledN(t AccountRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByIDCalls) < n {
		t.Errorf("FakeAccountRepo.FindByID called %d times, expected >= %d", len(f.FindByIDCalls), n)
	}
}

// FindByIDCalledWith returns true if FakeAccountRepo.FindByID was called with the given values
func (f_sym24 *FakeAccountRepo) FindByIDCalledWith(id uint) bool {
	for _, call_sym24 := range f_sym24.FindByIDCalls {
		if reflect.DeepEqual(call_sym24.Parameters.Id, id) {
			return true
		}
	}

	return false
}

// AssertFindByIDCalledWith calls t.Error if FakeAccountRepo.FindByID was not called with the given values
func (f_sym25 *FakeAccountRepo) AssertFindByIDCalledWith(t AccountRepoTestingT, id uint) {
	t.Helper()
	var found_sym25 bool
	for _, call_sym25 := range f_sym25.FindByIDCalls {
		if reflect.DeepEqual(call_sym25.Parameters.Id, id) {
			found_sym25 = true
			break
		}
	}

	if !found_sym25 {
		t.Error("FakeAccountRepo.FindByID not called with expected parameters")
	}
}

// FindByIDCalledOnceWith returns true if FakeAccountRepo.FindByID was called exactly once with the given values
func (f_sym26 *FakeAccountRepo) FindByIDCalledOnceWith(id uint) bool {
	var count_sym26 int
	for _, call_sym26 := range f_sym26.FindByIDCalls {
		if reflect.DeepEqual(call_sym26.Parameters.Id, id) {
			count_sym26++
		}
	}

	return count_sym26 == 1
}

// AssertFindByIDCalledOnceWith calls t.Error if FakeAccountRepo.FindByID was not called exactly once with the given values
func (f_sym27 *FakeAccountRepo) AssertFindByIDCalledOnceWith(t AccountRepoTestingT, id uint) {
	t.Helper()
	var count_sym27 int
	for _, call_sym27 := range f_sym27.FindByIDCalls {
		if reflect.DeepEqual(call_sym27.Parameters.Id, id) {
			count_sym27++
		}
	}

	if count_sym27 != 1 {
		t.Errorf("FakeAccountRepo.FindByID called %d times with expected parameters, expected one", count_sym27)
	}
}

// FindByIDResultsForCall returns the result values for the first call to FakeAccountRepo.FindByID with the given values
func (f_sym28 *FakeAccountRepo) FindByIDResultsForCall(id uint) (ident1 model.Account, ident2 error, found_sym28 bool) {
	for _, call_sym28 := range f_sym28.FindByIDCalls {
		if reflect.DeepEqual(call_sym28.Parameters.Id, id) {
			ident1 = call_sym28.Results.Ident1
			ident2 = call_sym28.Results.Ident2
			found_sym28 = true
			break
		}
	}

	return
}

// TransactionRepoFindByUserInvocation represents a single call of FakeTransactionRepo.FindByUser
type TransactionRepoFindByUserInvocation struct {
	Parameters struct {
		UserID uint
	}
	Results struct {
		Ident1 []model.Transaction
		Ident2 error
	}
}

// NewTransactionRepoFindByUserInvocation creates a new instance of TransactionRepoFindByUserInvocation
func NewTransactionRepoFindByUserInvocation(userID uint, ident1 []model.Transaction, ident2 error) *TransactionRepoFindByUserInvocation {
	invocation := new(TransactionRepoFindByUserInvocation)

	invocation.Parameters.UserID = userID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoFindByUserAccountInvocation represents a single call of FakeTransactionRepo.FindByUserAccount
type TransactionRepoFindByUserAccountInvocation struct {
	Parameters struct {
		UserID    uint
		AccountID uint
	}
	Results struct {
		Ident1 []model.Transaction
		Ident2 error
	}
}

// NewTransactionRepoFindByUserAccountInvocation creates a new instance of TransactionRepoFindByUserAccountInvocation
func NewTransactionRepoFindByUserAccountInvocation(userID uint, accountID uint, ident1 []model.Transaction, ident2 error) *TransactionRepoFindByUserAccountInvocation {
	invocation := new(TransactionRepoFindByUserAccountInvocation)

	invocation.Parameters.UserID = userID
	invocation.Parameters.AccountID = accountID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoCreateInvocation represents a single call of FakeTransactionRepo.Create
type TransactionRepoCreateInvocation struct {
	Parameters struct {
		Ident1 *model.Transaction
	}
	Results struct {
		Ident2 error
	}
}

// NewTransactionRepoCreateInvocation creates a new instance of TransactionRepoCreateInvocation
func NewTransactionRepoCreateInvocation(ident1 *model.Transaction, ident2 error) *TransactionRepoCreateInvocation {
	invocation := new(TransactionRepoCreateInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoUpdateInvocation represents a single call of FakeTransactionRepo.Update
type TransactionRepoUpdateInvocation struct {
	Parameters struct {
		Ident1 *model.Transaction
	}
	Results struct {
		Ident2 error
	}
}

// NewTransactionRepoUpdateInvocation creates a new instance of TransactionRepoUpdateInvocation
func NewTransactionRepoUpdateInvocation(ident1 *model.Transaction, ident2 error) *TransactionRepoUpdateInvocation {
	invocation := new(TransactionRepoUpdateInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type TransactionRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeTransactionRepo is a mock implementation of TransactionRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithTransactionRepo(t *testing.T) {
		f := &mock.FakeTransactionRepo{
			FindByUserHook: func(userID uint) (ident1 []model.Transaction, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByUser ...
		f.AssertFindByUserCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByUser.
*/
type FakeTransactionRepo struct {
	FindByUserHook        func(uint) ([]model.Transaction, error)
	FindByUserAccountHook func(uint, uint) ([]model.Transaction, error)
	CreateHook            func(*model.Transaction) error
	UpdateHook            func(*model.Transaction) error

	FindByUserCalls        []*TransactionRepoFindByUserInvocation
	FindByUserAccountCalls []*TransactionRepoFindByUserAccountInvocation
	CreateCalls            []*TransactionRepoCreateInvocation
	UpdateCalls            []*TransactionRepoUpdateInvocation
}

// NewFakeTransactionRepoDefaultPanic returns an instance of FakeTransactionRepo with all hooks configured to panic
func NewFakeTransactionRepoDefaultPanic() *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			panic("Unexpected call to TransactionRepo.FindByUser")
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			panic("Unexpected call to TransactionRepo.FindByUserAccount")
		},
		CreateHook: func(*model.Transaction) (ident2 error) {
			panic("Unexpected call to TransactionRepo.Create")
		},
		UpdateHook: func(*model.Transaction) (ident2 error) {
			panic("Unexpected call to TransactionRepo.Update")
		},
	}
}

// NewFakeTransactionRepoDefaultFatal returns an instance of FakeTransactionRepo with all hooks configured to call t.Fatal
func NewFakeTransactionRepoDefaultFatal(t_sym29 TransactionRepoTestingT) *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			t_sym29.Fatal("Unexpected call to TransactionRepo.FindByUser")
			return
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			t_sym29.Fatal("Unexpected call to TransactionRepo.FindByUserAccount")
			return
		},
		CreateHook: func(*model.Transaction) (ident2 error) {
			t_sym29.Fatal("Unexpected call to TransactionRepo.Create")
			return
		},
		UpdateHook: func(*model.Transaction) (ident2 error) {
			t_sym29.Fatal("Unexpected call to TransactionRepo.Update")
			return
		},
	}
}

// NewFakeTransactionRepoDefaultError returns an instance of FakeTransactionRepo with all hooks configured to call t.Error
func NewFakeTransactionRepoDefaultError(t_sym30 TransactionRepoTestingT) *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			t_sym30.Error("Unexpected call to TransactionRepo.FindByUser")
			return
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			t_sym30.Error("Unexpected call to TransactionRepo.FindByUserAccount")
			return
		},
		CreateHook: func(*model.Transaction) (ident2 error) {
			t_sym30.Error("Unexpected call to TransactionRepo.Create")
			return
		},
		UpdateHook: func(*model.Transaction) (ident2 error) {
			t_sym30.Error("Unexpected call to TransactionRepo.Update")
			return
		},
	}
}

func (f *FakeTransactionRepo) Reset() {
	f.FindByUserCalls = []*TransactionRepoFindByUserInvocation{}
	f.FindByUserAccountCalls = []*TransactionRepoFindByUserAccountInvocation{}
	f.CreateCalls = []*TransactionRepoCreateInvocation{}
	f.UpdateCalls = []*TransactionRepoUpdateInvocation{}
}

func (f_sym31 *FakeTransactionRepo) FindByUser(userID uint) (ident1 []model.Transaction, ident2 error) {
	if f_sym31.FindByUserHook == nil {
		panic("TransactionRepo.FindByUser() called but FakeTransactionRepo.FindByUserHook is nil")
	}

	invocation_sym31 := new(TransactionRepoFindByUserInvocation)
	f_sym31.FindByUserCalls = append(f_sym31.FindByUserCalls, invocation_sym31)

	invocation_sym31.Parameters.UserID = userID

	ident1, ident2 = f_sym31.FindByUserHook(userID)

	invocation_sym31.Results.Ident1 = ident1
	invocation_sym31.Results.Ident2 = ident2

	return
}

// SetFindByUserStub configures TransactionRepo.FindByUser to always return the given values
func (f_sym32 *FakeTransactionRepo) SetFindByUserStub(ident1 []model.Transaction, ident2 error) {
	f_sym32.FindByUserHook = func(uint) ([]model.Transaction, error) {
		return ident1, ident2
	}
}

// SetFindByUserInvocation configures TransactionRepo.FindByUser to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym33 *FakeTransactionRepo) SetFindByUserInvocation(calls_sym33 []*TransactionRepoFindByUserInvocation, fallback_sym33 func() ([]model.Transaction, error)) {
	f_sym33.FindByUserHook = func(userID uint) (ident1 []model.Transaction, ident2 error) {
		for _, call_sym33 := range calls_sym33 {
			if reflect.DeepEqual(call_sym33.Parameters.UserID, userID) {
				ident1 = call_sym33.Results.Ident1
				ident2 = call_sym33.Results.Ident2

				return
			}
		}

		return fallback_sym33()
	}
}

// FindByUserCalled returns true if FakeTransactionRepo.FindByUser was called
func (f *FakeTransactionRepo) FindByUserCalled() bool {
	return len(f.FindByUserCalls) != 0
}

// AssertFindByUserCalled calls t.Error if FakeTransactionRepo.FindByUser was not called
func (f *FakeTransactionRepo) AssertFindByUserCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) == 0 {
		t.Error("FakeTransactionRepo.FindByUser not called, expected at least one")
	}
}

// FindByUserNotCalled returns true if FakeTransactionRepo.FindByUser was not called
func (f *FakeTransactionRepo) FindByUserNotCalled() bool {
	return len(f.FindByUserCalls) == 0
}

// AssertFindByUserNotCalled calls t.Error if FakeTransactionRepo.FindByUser was called
func (f *FakeTransactionRepo) AssertFindByUserNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 0 {
		t.Error("FakeTransactionRepo.FindByUser called, expected none")
	}
}

// FindByUserCalledOnce returns true if FakeTransactionRepo.FindByUser was called exactly once
func (f *FakeTransactionRepo) FindByUserCalledOnce() bool {
	return len(f.FindByUserCalls) == 1
}

// AssertFindByUserCalledOnce calls t.Error if FakeTransactionRepo.FindByUser was not called exactly once
func (f *FakeTransactionRepo) AssertFindByUserCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 1 {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times, expected 1", len(f.FindByUserCalls))
	}
}

// FindByUserCalledN returns true if FakeTransactionRepo.FindByUser was called at least n times
func (f *FakeTransactionRepo) FindByUserCalledN(n int) bool {
	return len(f.FindByUserCalls) >= n
}

// AssertFindByUserCalledN calls t.Error if FakeTransactionRepo.FindByUser was called less than n times
func (f *FakeTransactionRepo) AssertFindByUserCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserCalls) < n {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times, expected >= %d", len(f.FindByUserCalls), n)
	}
}

// FindByUserCalledWith returns true if FakeTransactionRepo.FindByUser was called with the given values
func (f_sym34 *FakeTransactionRepo) FindByUserCalledWith(userID uint) bool {
	for _, call_sym34 := range f_sym34.FindByUserCalls {
		if reflect.DeepEqual(call_sym34.Parameters.UserID, userID) {
			return true
		}
	}

	return false
}

// AssertFindByUserCalledWith calls t.Error if FakeTransactionRepo.FindByUser was not called with the given values
func (f_sym35 *FakeTransactionRepo) AssertFindByUserCalledWith(t TransactionRepoTestingT, userID uint) {
	t.Helper()
	var found_sym35 bool
	for _, call_sym35 := range f_sym35.FindByUserCalls {
		if reflect.DeepEqual(call_sym35.Parameters.UserID, userID) {
			found_sym35 = true
			break
		}
	}

	if !found_sym35 {
		t.Error("FakeTransactionRepo.FindByUser not called with expected parameters")
	}
}

// FindByUserCalledOnceWith returns true if FakeTransactionRepo.FindByUser was called exactly once with the given values
func (f_sym36 *FakeTransactionRepo) FindByUserCalledOnceWith(userID uint) bool {
	var count_sym36 int
	for _, call_sym36 := range f_sym36.FindByUserCalls {
		if reflect.DeepEqual(call_sym36.Parameters.UserID, userID) {
			count_sym36++
		}
	}

	return count_sym36 == 1
}

// AssertFindByUserCalledOnceWith calls t.Error if FakeTransactionRepo.FindByUser was not called exactly once with the given values
func (f_sym37 *FakeTransactionRepo) AssertFindByUserCalledOnceWith(t TransactionRepoTestingT, userID uint) {
	t.Helper()
	var count_sym37 int
	for _, call_sym37 := range f_sym37.FindByUserCalls {
		if reflect.DeepEqual(call_sym37.Parameters.UserID, userID) {
			count_sym37++
		}
	}

	if count_sym37 != 1 {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times with expected parameters, expected one", count_sym37)
	}
}

// FindByUserResultsForCall returns the result values for the first call to FakeTransactionRepo.FindByUser with the given values
func (f_sym38 *FakeTransactionRepo) FindByUserResultsForCall(userID uint) (ident1 []model.Transaction, ident2 error, found_sym38 bool) {
	for _, call_sym38 := range f_sym38.FindByUserCalls {
		if reflect.DeepEqual(call_sym38.Parameters.UserID, userID) {
			ident1 = call_sym38.Results.Ident1
			ident2 = call_sym38.Results.Ident2
			found_sym38 = true
			break
		}
	}

	return
}

func (f_sym39 *FakeTransactionRepo) FindByUserAccount(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error) {
	if f_sym39.FindByUserAccountHook == nil {
		panic("TransactionRepo.FindByUserAccount() called but FakeTransactionRepo.FindByUserAccountHook is nil")
	}

	invocation_sym39 := new(TransactionRepoFindByUserAccountInvocation)
	f_sym39.FindByUserAccountCalls = append(f_sym39.FindByUserAccountCalls, invocation_sym39)

	invocation_sym39.Parameters.UserID = userID
	invocation_sym39.Parameters.AccountID = accountID

	ident1, ident2 = f_sym39.FindByUserAccountHook(userID, accountID)

	invocation_sym39.Results.Ident1 = ident1
	invocation_sym39.Results.Ident2 = ident2

	return
}

// SetFindByUserAccountStub configures TransactionRepo.FindByUserAccount to always return the given values
func (f_sym40 *FakeTransactionRepo) SetFindByUserAccountStub(ident1 []model.Transaction, ident2 error) {
	f_sym40.FindByUserAccountHook = func(uint, uint) ([]model.Transaction, error) {
		return ident1, ident2
	}
}

// SetFindByUserAccountInvocation configures TransactionRepo.FindByUserAccount to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym41 *FakeTransactionRepo) SetFindByUserAccountInvocation(calls_sym41 []*TransactionRepoFindByUserAccountInvocation, fallback_sym41 func() ([]model.Transaction, error)) {
	f_sym41.FindByUserAccountHook = func(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error) {
		for _, call_sym41 := range calls_sym41 {
			if reflect.DeepEqual(call_sym41.Parameters.UserID, userID) && reflect.DeepEqual(call_sym41.Parameters.AccountID, accountID) {
				ident1 = call_sym41.Results.Ident1
				ident2 = call_sym41.Results.Ident2

				return
			}
		}

		return fallback_sym41()
	}
}

// FindByUserAccountCalled returns true if FakeTransactionRepo.FindByUserAccount was called
func (f *FakeTransactionRepo) FindByUserAccountCalled() bool {
	return len(f.FindByUserAccountCalls) != 0
}

// AssertFindByUserAccountCalled calls t.Error if FakeTransactionRepo.FindByUserAccount was not called
func (f *FakeTransactionRepo) AssertFindByUserAccountCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) == 0 {
		t.Error("FakeTransactionRepo.FindByUserAccount not called, expected at least one")
	}
}

// FindByUserAccountNotCalled returns true if FakeTransactionRepo.FindByUserAccount was not called
func (f *FakeTransactionRepo) FindByUserAccountNotCalled() bool {
	return len(f.FindByUserAccountCalls) == 0
}

// AssertFindByUserAccountNotCalled calls t.Error if FakeTransactionRepo.FindByUserAccount was called
func (f *FakeTransactionRepo) AssertFindByUserAccountNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) != 0 {
		t.Error("FakeTransactionRepo.FindByUserAccount called, expected none")
	}
}

// FindByUserAccountCalledOnce returns true if FakeTransactionRepo.FindByUserAccount was called exactly once
func (f *FakeTransactionRepo) FindByUserAccountCalledOnce() bool {
	return len(f.FindByUserAccountCalls) == 1
}

// AssertFindByUserAccountCalledOnce calls t.Error if FakeTransactionRepo.FindByUserAccount was not called exactly once
func (f *FakeTransactionRepo) AssertFindByUserAccountCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) != 1 {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times, expected 1", len(f.FindByUserAccountCalls))
	}
}

// FindByUserAccountCalledN returns true if FakeTransactionRepo.FindByUserAccount was called at least n times
func (f *FakeTransactionRepo) FindByUserAccountCalledN(n int) bool {
	return len(f.FindByUserAccountCalls) >= n
}

// AssertFindByUserAccountCalledN calls t.Error if FakeTransactionRepo.FindByUserAccount was called less than n times
func (f *FakeTransactionRepo) AssertFindByUserAccountCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserAccountCalls) < n {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times, expected >= %d", len(f.FindByUserAccountCalls), n)
	}
}

// FindByUserAccountCalledWith returns true if FakeTransactionRepo.FindByUserAccount was called with the given values
func (f_sym42 *FakeTransactionRepo) FindByUserAccountCalledWith(userID uint, accountID uint) bool {
	for _, call_sym42 := range f_sym42.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym42.Parameters.UserID, userID) && reflect.DeepEqual(call_sym42.Parameters.AccountID, accountID) {
			return true
		}
	}

	return false
}

// AssertFindByUserAccountCalledWith calls t.Error if FakeTransactionRepo.FindByUserAccount was not called with the given values
func (f_sym43 *FakeTransactionRepo) AssertFindByUserAccountCalledWith(t TransactionRepoTestingT, userID uint, accountID uint) {
	t.Helper()
	var found_sym43 bool
	for _, call_sym43 := range f_sym43.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym43.Parameters.UserID, userID) && reflect.DeepEqual(call_sym43.Parameters.AccountID, accountID) {
			found_sym43 = true
			break
		}
	}

	if !found_sym43 {
		t.Error("FakeTransactionRepo.FindByUserAccount not called with expected parameters")
	}
}

// FindByUserAccountCalledOnceWith returns true if FakeTransactionRepo.FindByUserAccount was called exactly once with the given values
func (f_sym44 *FakeTransactionRepo) FindByUserAccountCalledOnceWith(userID uint, accountID uint) bool {
	var count_sym44 int
	for _, call_sym44 := range f_sym44.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym44.Parameters.UserID, userID) && reflect.DeepEqual(call_sym44.Parameters.AccountID, accountID) {
			count_sym44++
		}
	}

	return count_sym44 == 1
}

// AssertFindByUserAccountCalledOnceWith calls t.Error if FakeTransactionRepo.FindByUserAccount was not called exactly once with the given values
func (f_sym45 *FakeTransactionRepo) AssertFindByUserAccountCalledOnceWith(t TransactionRepoTestingT, userID uint, accountID uint) {
	t.Helper()
	var count_sym45 int
	for _, call_sym45 := range f_sym45.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym45.Parameters.UserID, userID) && reflect.DeepEqual(call_sym45.Parameters.AccountID, accountID) {
			count_sym45++
		}
	}

	if count_sym45 != 1 {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times with expected parameters, expected one", count_sym45)
	}
}

// FindByUserAccountResultsForCall returns the result values for the first call to FakeTransactionRepo.FindByUserAccount with the given values
func (f_sym46 *FakeTransactionRepo) FindByUserAccountResultsForCall(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error, found_sym46 bool) {
	for _, call_sym46 := range f_sym46.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym46.Parameters.UserID, userID) && reflect.DeepEqual(call_sym46.Parameters.AccountID, accountID) {
			ident1 = call_sym46.Results.Ident1
			ident2 = call_sym46.Results.Ident2
			found_sym46 = true
			break
		}
	}

	return
}

func (f_sym47 *FakeTransactionRepo) Create(ident1 *model.Transaction) (ident2 error) {
	if f_sym47.CreateHook == nil {
		panic("TransactionRepo.Create() called but FakeTransactionRepo.CreateHook is nil")
	}

	invocation_sym47 := new(TransactionRepoCreateInvocation)
	f_sym47.CreateCalls = append(f_sym47.CreateCalls, invocation_sym47)

	invocation_sym47.Parameters.Ident1 = ident1

	ident2 = f_sym47.CreateHook(ident1)

	invocation_sym47.Results.Ident2 = ident2

	return
}

// SetCreateStub configures TransactionRepo.Create to always return the given values
func (f_sym48 *FakeTransactionRepo) SetCreateStub(ident2 error) {
	f_sym48.CreateHook = func(*model.Transaction) error {
		return ident2
	}
}

// SetCreateInvocation configures TransactionRepo.Create to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym49 *FakeTransactionRepo) SetCreateInvocation(calls_sym49 []*TransactionRepoCreateInvocation, fallback_sym49 func() error) {
	f_sym49.CreateHook = func(ident1 *model.Transaction) (ident2 error) {
		for _, call_sym49 := range calls_sym49 {
			if reflect.DeepEqual(call_sym49.Parameters.Ident1, ident1) {
				ident2 = call_sym49.Results.Ident2

				return
			}
		}

		return fallback_sym49()
	}
}

// CreateCalled returns true if FakeTransactionRepo.Create was called
func (f *FakeTransactionRepo) CreateCalled() bool {
	return len(f.CreateCalls) != 0
}

// AssertCreateCalled calls t.Error if FakeTransactionRepo.Create was not called
func (f *FakeTransactionRepo) AssertCreateCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.CreateCalls) == 0 {
		t.Error("FakeTransactionRepo.Create not called, expected at least one")
	}
}

// CreateNotCalled returns true if FakeTransactionRepo.Create was not called
func (f *FakeTransactionRepo) CreateNotCalled() bool {
	return len(f.CreateCalls) == 0
}

// AssertCreateNotCalled calls t.Error if FakeTransactionRepo.Create was called
func (f *FakeTransactionRepo) AssertCreateNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.CreateCalls) != 0 {
		t.Error("FakeTransactionRepo.Create called, expected none")
	}
}

// CreateCalledOnce returns true if FakeTransactionRepo.Create was called exactly once
func (f *FakeTransactionRepo) CreateCalledOnce() bool {
	return len(f.CreateCalls) == 1
}

// AssertCreateCalledOnce calls t.Error if FakeTransactionRepo.Create was not called exactly once
func (f *FakeTransactionRepo) AssertCreateCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.CreateCalls) != 1 {
		t.Errorf("FakeTransactionRepo.Create called %d times, expected 1", len(f.CreateCalls))
	}
}

// CreateCalledN returns true if FakeTransactionRepo.Create was called at least n times
func (f *FakeTransactionRepo) CreateCalledN(n int) bool {
	return len(f.CreateCalls) >= n
}

// AssertCreateCalledN calls t.Error if FakeTransactionRepo.Create was called less than n times
func (f *FakeTransactionRepo) AssertCreateCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.CreateCalls) < n {
		t.Errorf("FakeTransactionRepo.Create called %d times, expected >= %d", len(f.CreateCalls), n)
	}
}

// CreateCalledWith returns true if FakeTransactionRepo.Create was called with the given values
func (f_sym50 *FakeTransactionRepo) CreateCalledWith(ident1 *model.Transaction) bool {
	for _, call_sym50 := range f_sym50.CreateCalls {
		if reflect.DeepEqual(call_sym50.Parameters.Ident1, ident1) {
			return true
		}
	}

	return false
}

// AssertCreateCalledWith calls t.Error if FakeTransactionRepo.Create was not called with the given values
func (f_sym51 *FakeTransactionRepo) AssertCreateCalledWith(t TransactionRepoTestingT, ident1 *model.Transaction) {
	t.Helper()
	var found_sym51 bool
	for _, call_sym51 := range f_sym51.CreateCalls {
		if reflect.DeepEqual(call_sym51.Parameters.Ident1, ident1) {
			found_sym51 = true
			break
		}
	}

	if !found_sym51 {
		t.Error("FakeTransactionRepo.Create not called with expected parameters")
	}
}

// CreateCalledOnceWith returns true if FakeTransactionRepo.Create was called exactly once with the given values
func (f_sym52 *FakeTransactionRepo) CreateCalledOnceWith(ident1 *model.Transaction) bool {
	var count_sym52 int
	for _, call_sym52 := range f_sym52.CreateCalls {
		if reflect.DeepEqual(call_sym52.Parameters.Ident1, ident1) {
			count_sym52++
		}
	}

	return count_sym52 == 1
}

// AssertCreateCalledOnceWith calls t.Error if FakeTransactionRepo.Create was not called exactly once with the given values
func (f_sym53 *FakeTransactionRepo) AssertCreateCalledOnceWith(t TransactionRepoTestingT, ident1 *model.Transaction) {
	t.Helper()
	var count_sym53 int
	for _, call_sym53 := range f_sym53.CreateCalls {
		if reflect.DeepEqual(call_sym53.Parameters.Ident1, ident1) {
			count_sym53++
		}
	}

	if count_sym53 != 1 {
		t.Errorf("FakeTransactionRepo.Create called %d times with expected parameters, expected one", count_sym53)
	}
}

// CreateResultsForCall returns the result values for the first call to FakeTransactionRepo.Create with the given values
func (f_sym54 *FakeTransactionRepo) CreateResultsForCall(ident1 *model.Transaction) (ident2 error, found_sym54 bool) {
	for _, call_sym54 := range f_sym54.CreateCalls {
		if reflect.DeepEqual(call_sym54.Parameters.Ident1, ident1) {
			ident2 = call_sym54.Results.Ident2
			found_sym54 = true
			break
		}
	}

	return
}

func (f_sym55 *FakeTransactionRepo) Update(ident1 *model.Transaction) (ident2 error) {
	if f_sym55.UpdateHook == nil {
		panic("TransactionRepo.Update() called but FakeTransactionRepo.UpdateHook is nil")
	}

	invocation_sym55 := new(TransactionRepoUpdateInvocation)
	f_sym55.UpdateCalls = append(f_sym55.UpdateCalls, invocation_sym55)

	invocation_sym55.Parameters.Ident1 = ident1

	ident2 = f_sym55.UpdateHook(ident1)

	invocation_sym55.Results.Ident2 = ident2

	return
}

// SetUpdateStub configures TransactionRepo.Update to always return the given values
func (f_sym56 *FakeTransactionRepo) SetUpdateStub(ident2 error) {
	f_sym56.UpdateHook = func(*model.Transaction) error {
		return ident2
	}
}

// SetUpdateInvocation configures TransactionRepo.Update to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym57 *FakeTransactionRepo) SetUpdateInvocation(calls_sym57 []*TransactionRepoUpdateInvocation, fallback_sym57 func() error) {
	f_sym57.UpdateHook = func(ident1 *model.Transaction) (ident2 error) {
		for _, call_sym57 := range calls_sym57 {
			if reflect.DeepEqual(call_sym57.Parameters.Ident1, ident1) {
				ident2 = call_sym57.Results.Ident2

				return
			}
		}

		return fallback_sym57()
	}
}

// UpdateCalled returns true if FakeTransactionRepo.Update was called
func (f *FakeTransactionRepo) UpdateCalled() bool {
	return len(f.UpdateCalls) != 0
}

// AssertUpdateCalled calls t.Error if FakeTransactionRepo.Update was not called
func (f *FakeTransactionRepo) AssertUpdateCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.UpdateCalls) == 0 {
		t.Error("FakeTransactionRepo.Update not called, expected at least one")
	}
}

// UpdateNotCalled returns true if FakeTransactionRepo.Update was not called
func (f *FakeTransactionRepo) UpdateNotCalled() bool {
	return len(f.UpdateCalls) == 0
}

// AssertUpdateNotCalled calls t.Error if FakeTransactionRepo.Update was called
func (f *FakeTransactionRepo) AssertUpdateNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.UpdateCalls) != 0 {
		t.Error("FakeTransactionRepo.Update called, expected none")
	}
}

// UpdateCalledOnce returns true if FakeTransactionRepo.Update was called exactly once
func (f *FakeTransactionRepo) UpdateCalledOnce() bool {
	return len(f.UpdateCalls) == 1
}

// AssertUpdateCalledOnce calls t.Error if FakeTransactionRepo.Update was not called exactly once
func (f *FakeTransactionRepo) AssertUpdateCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.UpdateCalls) != 1 {
		t.Errorf("FakeTransactionRepo.Update called %d times, expected 1", len(f.UpdateCalls))
	}
}

// UpdateCalledN returns true if FakeTransactionRepo.Update was called at least n times
func (f *FakeTransactionRepo) UpdateCalledN(n int) bool {
	return len(f.UpdateCalls) >= n
}

// AssertUpdateCalledN calls t.Error if FakeTransactionRepo.Update was called less than n times
func (f *FakeTransactionRepo) AssertUpdateCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.UpdateCalls) < n {
		t.Errorf("FakeTransactionRepo.Update called %d times, expected >= %d", len(f.UpdateCalls), n)
	}
}

// UpdateCalledWith returns true if FakeTransactionRepo.Update was called with the given values
func (f_sym58 *FakeTransactionRepo) UpdateCalledWith(ident1 *model.Transaction) bool {
	for _, call_sym58 := range f_sym58.UpdateCalls {
		if reflect.DeepEqual(call_sym58.Parameters.Ident1, ident1) {
			return true
		}
	}

	return false
}

// AssertUpdateCalledWith calls t.Error if FakeTransactionRepo.Update was not called with the given values
func (f_sym59 *FakeTransactionRepo) AssertUpdateCalledWith(t TransactionRepoTestingT, ident1 *model.Transaction) {
	t.Helper()
	var found_sym59 bool
	for _, call_sym59 := range f_sym59.UpdateCalls {
		if reflect.DeepEqual(call_sym59.Parameters.Ident1, ident1) {
			found_sym59 = true
			break
		}
	}

	if !found_sym59 {
		t.Error("FakeTransactionRepo.Update not called with expected parameters")
	}
}

// UpdateCalledOnceWith returns true if FakeTransactionRepo.Update was called exactly once with the given values
func (f_sym60 *FakeTransactionRepo) UpdateCalledOnceWith(ident1 *model.Transaction) bool {
	var count_sym60 int
	for _, call_sym60 := range f_sym60.UpdateCalls {
		if reflect.DeepEqual(call_sym60.Parameters.Ident1, ident1) {
			count_sym60++
		}
	}

	return count_sym60 == 1
}

// AssertUpdateCalledOnceWith calls t.Error if FakeTransactionRepo.Update was not called exactly once with the given values
func (f_sym61 *FakeTransactionRepo) AssertUpdateCalledOnceWith(t TransactionRepoTestingT, ident1 *model.Transaction) {
	t.Helper()
	var count_sym61 int
	for _, call_sym61 := range f_sym61.UpdateCalls {
		if reflect.DeepEqual(call_sym61.Parameters.Ident1, ident1) {
			count_sym61++
		}
	}

	if count_sym61 != 1 {
		t.Errorf("FakeTransactionRepo.Update called %d times with expected parameters, expected one", count_sym61)
	}
}

// UpdateResultsForCall returns the result values for the first call to FakeTransactionRepo.Update with the given values
func (f_sym62 *FakeTransactionRepo) UpdateResultsForCall(ident1 *model.Transaction) (ident2 error, found_sym62 bool) {
	for _, call_sym62 := range f_sym62.UpdateCalls {
		if reflect.DeepEqual(call_sym62.Parameters.Ident1, ident1) {
			ident2 = call_sym62.Results.Ident2
			found_sym62 = true
			break
		}
	}

	return
}
