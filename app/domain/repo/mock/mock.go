// generated by "charlatan -dir=/home/congphan/Golang/src/github.com/congphan/go-prj-skeleton/app/domain/repo -output=/home/congphan/Golang/src/github.com/congphan/go-prj-skeleton/app/domain/repo/mock/mock.go -package=mock UserRepo AccountRepo TransactionRepo".  DO NOT EDIT.

package mock

import "reflect"
import "go-prj-skeleton/app/domain/model"

// UserRepoFindByIDInvocation represents a single call of FakeUserRepo.FindByID
type UserRepoFindByIDInvocation struct {
	Parameters struct {
		Id uint
	}
	Results struct {
		Ident1 model.User
		Ident2 error
	}
}

// NewUserRepoFindByIDInvocation creates a new instance of UserRepoFindByIDInvocation
func NewUserRepoFindByIDInvocation(id uint, ident1 model.User, ident2 error) *UserRepoFindByIDInvocation {
	invocation := new(UserRepoFindByIDInvocation)

	invocation.Parameters.Id = id

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// UserRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type UserRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeUserRepo is a mock implementation of UserRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithUserRepo(t *testing.T) {
		f := &mock.FakeUserRepo{
			FindByIDHook: func(id uint) (ident1 model.User, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByID ...
		f.AssertFindByIDCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByID.
*/
type FakeUserRepo struct {
	FindByIDHook func(uint) (model.User, error)

	FindByIDCalls []*UserRepoFindByIDInvocation
}

// NewFakeUserRepoDefaultPanic returns an instance of FakeUserRepo with all hooks configured to panic
func NewFakeUserRepoDefaultPanic() *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			panic("Unexpected call to UserRepo.FindByID")
		},
	}
}

// NewFakeUserRepoDefaultFatal returns an instance of FakeUserRepo with all hooks configured to call t.Fatal
func NewFakeUserRepoDefaultFatal(t_sym1 UserRepoTestingT) *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			t_sym1.Fatal("Unexpected call to UserRepo.FindByID")
			return
		},
	}
}

// NewFakeUserRepoDefaultError returns an instance of FakeUserRepo with all hooks configured to call t.Error
func NewFakeUserRepoDefaultError(t_sym2 UserRepoTestingT) *FakeUserRepo {
	return &FakeUserRepo{
		FindByIDHook: func(uint) (ident1 model.User, ident2 error) {
			t_sym2.Error("Unexpected call to UserRepo.FindByID")
			return
		},
	}
}

func (f *FakeUserRepo) Reset() {
	f.FindByIDCalls = []*UserRepoFindByIDInvocation{}
}

func (f_sym3 *FakeUserRepo) FindByID(id uint) (ident1 model.User, ident2 error) {
	if f_sym3.FindByIDHook == nil {
		panic("UserRepo.FindByID() called but FakeUserRepo.FindByIDHook is nil")
	}

	invocation_sym3 := new(UserRepoFindByIDInvocation)
	f_sym3.FindByIDCalls = append(f_sym3.FindByIDCalls, invocation_sym3)

	invocation_sym3.Parameters.Id = id

	ident1, ident2 = f_sym3.FindByIDHook(id)

	invocation_sym3.Results.Ident1 = ident1
	invocation_sym3.Results.Ident2 = ident2

	return
}

// SetFindByIDStub configures UserRepo.FindByID to always return the given values
func (f_sym4 *FakeUserRepo) SetFindByIDStub(ident1 model.User, ident2 error) {
	f_sym4.FindByIDHook = func(uint) (model.User, error) {
		return ident1, ident2
	}
}

// SetFindByIDInvocation configures UserRepo.FindByID to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym5 *FakeUserRepo) SetFindByIDInvocation(calls_sym5 []*UserRepoFindByIDInvocation, fallback_sym5 func() (model.User, error)) {
	f_sym5.FindByIDHook = func(id uint) (ident1 model.User, ident2 error) {
		for _, call_sym5 := range calls_sym5 {
			if reflect.DeepEqual(call_sym5.Parameters.Id, id) {
				ident1 = call_sym5.Results.Ident1
				ident2 = call_sym5.Results.Ident2

				return
			}
		}

		return fallback_sym5()
	}
}

// FindByIDCalled returns true if FakeUserRepo.FindByID was called
func (f *FakeUserRepo) FindByIDCalled() bool {
	return len(f.FindByIDCalls) != 0
}

// AssertFindByIDCalled calls t.Error if FakeUserRepo.FindByID was not called
func (f *FakeUserRepo) AssertFindByIDCalled(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) == 0 {
		t.Error("FakeUserRepo.FindByID not called, expected at least one")
	}
}

// FindByIDNotCalled returns true if FakeUserRepo.FindByID was not called
func (f *FakeUserRepo) FindByIDNotCalled() bool {
	return len(f.FindByIDCalls) == 0
}

// AssertFindByIDNotCalled calls t.Error if FakeUserRepo.FindByID was called
func (f *FakeUserRepo) AssertFindByIDNotCalled(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 0 {
		t.Error("FakeUserRepo.FindByID called, expected none")
	}
}

// FindByIDCalledOnce returns true if FakeUserRepo.FindByID was called exactly once
func (f *FakeUserRepo) FindByIDCalledOnce() bool {
	return len(f.FindByIDCalls) == 1
}

// AssertFindByIDCalledOnce calls t.Error if FakeUserRepo.FindByID was not called exactly once
func (f *FakeUserRepo) AssertFindByIDCalledOnce(t UserRepoTestingT) {
	t.Helper()
	if len(f.FindByIDCalls) != 1 {
		t.Errorf("FakeUserRepo.FindByID called %d times, expected 1", len(f.FindByIDCalls))
	}
}

// FindByIDCalledN returns true if FakeUserRepo.FindByID was called at least n times
func (f *FakeUserRepo) FindByIDCalledN(n int) bool {
	return len(f.FindByIDCalls) >= n
}

// AssertFindByIDCalledN calls t.Error if FakeUserRepo.FindByID was called less than n times
func (f *FakeUserRepo) AssertFindByIDCalledN(t UserRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByIDCalls) < n {
		t.Errorf("FakeUserRepo.FindByID called %d times, expected >= %d", len(f.FindByIDCalls), n)
	}
}

// FindByIDCalledWith returns true if FakeUserRepo.FindByID was called with the given values
func (f_sym6 *FakeUserRepo) FindByIDCalledWith(id uint) bool {
	for _, call_sym6 := range f_sym6.FindByIDCalls {
		if reflect.DeepEqual(call_sym6.Parameters.Id, id) {
			return true
		}
	}

	return false
}

// AssertFindByIDCalledWith calls t.Error if FakeUserRepo.FindByID was not called with the given values
func (f_sym7 *FakeUserRepo) AssertFindByIDCalledWith(t UserRepoTestingT, id uint) {
	t.Helper()
	var found_sym7 bool
	for _, call_sym7 := range f_sym7.FindByIDCalls {
		if reflect.DeepEqual(call_sym7.Parameters.Id, id) {
			found_sym7 = true
			break
		}
	}

	if !found_sym7 {
		t.Error("FakeUserRepo.FindByID not called with expected parameters")
	}
}

// FindByIDCalledOnceWith returns true if FakeUserRepo.FindByID was called exactly once with the given values
func (f_sym8 *FakeUserRepo) FindByIDCalledOnceWith(id uint) bool {
	var count_sym8 int
	for _, call_sym8 := range f_sym8.FindByIDCalls {
		if reflect.DeepEqual(call_sym8.Parameters.Id, id) {
			count_sym8++
		}
	}

	return count_sym8 == 1
}

// AssertFindByIDCalledOnceWith calls t.Error if FakeUserRepo.FindByID was not called exactly once with the given values
func (f_sym9 *FakeUserRepo) AssertFindByIDCalledOnceWith(t UserRepoTestingT, id uint) {
	t.Helper()
	var count_sym9 int
	for _, call_sym9 := range f_sym9.FindByIDCalls {
		if reflect.DeepEqual(call_sym9.Parameters.Id, id) {
			count_sym9++
		}
	}

	if count_sym9 != 1 {
		t.Errorf("FakeUserRepo.FindByID called %d times with expected parameters, expected one", count_sym9)
	}
}

// FindByIDResultsForCall returns the result values for the first call to FakeUserRepo.FindByID with the given values
func (f_sym10 *FakeUserRepo) FindByIDResultsForCall(id uint) (ident1 model.User, ident2 error, found_sym10 bool) {
	for _, call_sym10 := range f_sym10.FindByIDCalls {
		if reflect.DeepEqual(call_sym10.Parameters.Id, id) {
			ident1 = call_sym10.Results.Ident1
			ident2 = call_sym10.Results.Ident2
			found_sym10 = true
			break
		}
	}

	return
}

// AccountRepoFindByUserInvocation represents a single call of FakeAccountRepo.FindByUser
type AccountRepoFindByUserInvocation struct {
	Parameters struct {
		UserID uint
	}
	Results struct {
		Ident1 []model.Account
		Ident2 error
	}
}

// NewAccountRepoFindByUserInvocation creates a new instance of AccountRepoFindByUserInvocation
func NewAccountRepoFindByUserInvocation(userID uint, ident1 []model.Account, ident2 error) *AccountRepoFindByUserInvocation {
	invocation := new(AccountRepoFindByUserInvocation)

	invocation.Parameters.UserID = userID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// AccountRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type AccountRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeAccountRepo is a mock implementation of AccountRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithAccountRepo(t *testing.T) {
		f := &mock.FakeAccountRepo{
			FindByUserHook: func(userID uint) (ident1 []model.Account, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByUser ...
		f.AssertFindByUserCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByUser.
*/
type FakeAccountRepo struct {
	FindByUserHook func(uint) ([]model.Account, error)

	FindByUserCalls []*AccountRepoFindByUserInvocation
}

// NewFakeAccountRepoDefaultPanic returns an instance of FakeAccountRepo with all hooks configured to panic
func NewFakeAccountRepoDefaultPanic() *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			panic("Unexpected call to AccountRepo.FindByUser")
		},
	}
}

// NewFakeAccountRepoDefaultFatal returns an instance of FakeAccountRepo with all hooks configured to call t.Fatal
func NewFakeAccountRepoDefaultFatal(t_sym11 AccountRepoTestingT) *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			t_sym11.Fatal("Unexpected call to AccountRepo.FindByUser")
			return
		},
	}
}

// NewFakeAccountRepoDefaultError returns an instance of FakeAccountRepo with all hooks configured to call t.Error
func NewFakeAccountRepoDefaultError(t_sym12 AccountRepoTestingT) *FakeAccountRepo {
	return &FakeAccountRepo{
		FindByUserHook: func(uint) (ident1 []model.Account, ident2 error) {
			t_sym12.Error("Unexpected call to AccountRepo.FindByUser")
			return
		},
	}
}

func (f *FakeAccountRepo) Reset() {
	f.FindByUserCalls = []*AccountRepoFindByUserInvocation{}
}

func (f_sym13 *FakeAccountRepo) FindByUser(userID uint) (ident1 []model.Account, ident2 error) {
	if f_sym13.FindByUserHook == nil {
		panic("AccountRepo.FindByUser() called but FakeAccountRepo.FindByUserHook is nil")
	}

	invocation_sym13 := new(AccountRepoFindByUserInvocation)
	f_sym13.FindByUserCalls = append(f_sym13.FindByUserCalls, invocation_sym13)

	invocation_sym13.Parameters.UserID = userID

	ident1, ident2 = f_sym13.FindByUserHook(userID)

	invocation_sym13.Results.Ident1 = ident1
	invocation_sym13.Results.Ident2 = ident2

	return
}

// SetFindByUserStub configures AccountRepo.FindByUser to always return the given values
func (f_sym14 *FakeAccountRepo) SetFindByUserStub(ident1 []model.Account, ident2 error) {
	f_sym14.FindByUserHook = func(uint) ([]model.Account, error) {
		return ident1, ident2
	}
}

// SetFindByUserInvocation configures AccountRepo.FindByUser to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym15 *FakeAccountRepo) SetFindByUserInvocation(calls_sym15 []*AccountRepoFindByUserInvocation, fallback_sym15 func() ([]model.Account, error)) {
	f_sym15.FindByUserHook = func(userID uint) (ident1 []model.Account, ident2 error) {
		for _, call_sym15 := range calls_sym15 {
			if reflect.DeepEqual(call_sym15.Parameters.UserID, userID) {
				ident1 = call_sym15.Results.Ident1
				ident2 = call_sym15.Results.Ident2

				return
			}
		}

		return fallback_sym15()
	}
}

// FindByUserCalled returns true if FakeAccountRepo.FindByUser was called
func (f *FakeAccountRepo) FindByUserCalled() bool {
	return len(f.FindByUserCalls) != 0
}

// AssertFindByUserCalled calls t.Error if FakeAccountRepo.FindByUser was not called
func (f *FakeAccountRepo) AssertFindByUserCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) == 0 {
		t.Error("FakeAccountRepo.FindByUser not called, expected at least one")
	}
}

// FindByUserNotCalled returns true if FakeAccountRepo.FindByUser was not called
func (f *FakeAccountRepo) FindByUserNotCalled() bool {
	return len(f.FindByUserCalls) == 0
}

// AssertFindByUserNotCalled calls t.Error if FakeAccountRepo.FindByUser was called
func (f *FakeAccountRepo) AssertFindByUserNotCalled(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 0 {
		t.Error("FakeAccountRepo.FindByUser called, expected none")
	}
}

// FindByUserCalledOnce returns true if FakeAccountRepo.FindByUser was called exactly once
func (f *FakeAccountRepo) FindByUserCalledOnce() bool {
	return len(f.FindByUserCalls) == 1
}

// AssertFindByUserCalledOnce calls t.Error if FakeAccountRepo.FindByUser was not called exactly once
func (f *FakeAccountRepo) AssertFindByUserCalledOnce(t AccountRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 1 {
		t.Errorf("FakeAccountRepo.FindByUser called %d times, expected 1", len(f.FindByUserCalls))
	}
}

// FindByUserCalledN returns true if FakeAccountRepo.FindByUser was called at least n times
func (f *FakeAccountRepo) FindByUserCalledN(n int) bool {
	return len(f.FindByUserCalls) >= n
}

// AssertFindByUserCalledN calls t.Error if FakeAccountRepo.FindByUser was called less than n times
func (f *FakeAccountRepo) AssertFindByUserCalledN(t AccountRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserCalls) < n {
		t.Errorf("FakeAccountRepo.FindByUser called %d times, expected >= %d", len(f.FindByUserCalls), n)
	}
}

// FindByUserCalledWith returns true if FakeAccountRepo.FindByUser was called with the given values
func (f_sym16 *FakeAccountRepo) FindByUserCalledWith(userID uint) bool {
	for _, call_sym16 := range f_sym16.FindByUserCalls {
		if reflect.DeepEqual(call_sym16.Parameters.UserID, userID) {
			return true
		}
	}

	return false
}

// AssertFindByUserCalledWith calls t.Error if FakeAccountRepo.FindByUser was not called with the given values
func (f_sym17 *FakeAccountRepo) AssertFindByUserCalledWith(t AccountRepoTestingT, userID uint) {
	t.Helper()
	var found_sym17 bool
	for _, call_sym17 := range f_sym17.FindByUserCalls {
		if reflect.DeepEqual(call_sym17.Parameters.UserID, userID) {
			found_sym17 = true
			break
		}
	}

	if !found_sym17 {
		t.Error("FakeAccountRepo.FindByUser not called with expected parameters")
	}
}

// FindByUserCalledOnceWith returns true if FakeAccountRepo.FindByUser was called exactly once with the given values
func (f_sym18 *FakeAccountRepo) FindByUserCalledOnceWith(userID uint) bool {
	var count_sym18 int
	for _, call_sym18 := range f_sym18.FindByUserCalls {
		if reflect.DeepEqual(call_sym18.Parameters.UserID, userID) {
			count_sym18++
		}
	}

	return count_sym18 == 1
}

// AssertFindByUserCalledOnceWith calls t.Error if FakeAccountRepo.FindByUser was not called exactly once with the given values
func (f_sym19 *FakeAccountRepo) AssertFindByUserCalledOnceWith(t AccountRepoTestingT, userID uint) {
	t.Helper()
	var count_sym19 int
	for _, call_sym19 := range f_sym19.FindByUserCalls {
		if reflect.DeepEqual(call_sym19.Parameters.UserID, userID) {
			count_sym19++
		}
	}

	if count_sym19 != 1 {
		t.Errorf("FakeAccountRepo.FindByUser called %d times with expected parameters, expected one", count_sym19)
	}
}

// FindByUserResultsForCall returns the result values for the first call to FakeAccountRepo.FindByUser with the given values
func (f_sym20 *FakeAccountRepo) FindByUserResultsForCall(userID uint) (ident1 []model.Account, ident2 error, found_sym20 bool) {
	for _, call_sym20 := range f_sym20.FindByUserCalls {
		if reflect.DeepEqual(call_sym20.Parameters.UserID, userID) {
			ident1 = call_sym20.Results.Ident1
			ident2 = call_sym20.Results.Ident2
			found_sym20 = true
			break
		}
	}

	return
}

// TransactionRepoFindByUserInvocation represents a single call of FakeTransactionRepo.FindByUser
type TransactionRepoFindByUserInvocation struct {
	Parameters struct {
		UserID uint
	}
	Results struct {
		Ident1 []model.Transaction
		Ident2 error
	}
}

// NewTransactionRepoFindByUserInvocation creates a new instance of TransactionRepoFindByUserInvocation
func NewTransactionRepoFindByUserInvocation(userID uint, ident1 []model.Transaction, ident2 error) *TransactionRepoFindByUserInvocation {
	invocation := new(TransactionRepoFindByUserInvocation)

	invocation.Parameters.UserID = userID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoFindByUserAccountInvocation represents a single call of FakeTransactionRepo.FindByUserAccount
type TransactionRepoFindByUserAccountInvocation struct {
	Parameters struct {
		UserID    uint
		AccountID uint
	}
	Results struct {
		Ident1 []model.Transaction
		Ident2 error
	}
}

// NewTransactionRepoFindByUserAccountInvocation creates a new instance of TransactionRepoFindByUserAccountInvocation
func NewTransactionRepoFindByUserAccountInvocation(userID uint, accountID uint, ident1 []model.Transaction, ident2 error) *TransactionRepoFindByUserAccountInvocation {
	invocation := new(TransactionRepoFindByUserAccountInvocation)

	invocation.Parameters.UserID = userID
	invocation.Parameters.AccountID = accountID

	invocation.Results.Ident1 = ident1
	invocation.Results.Ident2 = ident2

	return invocation
}

// TransactionRepoTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type TransactionRepoTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeTransactionRepo is a mock implementation of TransactionRepo for testing.
Use it in your tests as in this example:

	package example

	func TestWithTransactionRepo(t *testing.T) {
		f := &mock.FakeTransactionRepo{
			FindByUserHook: func(userID uint) (ident1 []model.Transaction, ident2 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeFindByUser ...
		f.AssertFindByUserCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeFindByUser.
*/
type FakeTransactionRepo struct {
	FindByUserHook        func(uint) ([]model.Transaction, error)
	FindByUserAccountHook func(uint, uint) ([]model.Transaction, error)

	FindByUserCalls        []*TransactionRepoFindByUserInvocation
	FindByUserAccountCalls []*TransactionRepoFindByUserAccountInvocation
}

// NewFakeTransactionRepoDefaultPanic returns an instance of FakeTransactionRepo with all hooks configured to panic
func NewFakeTransactionRepoDefaultPanic() *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			panic("Unexpected call to TransactionRepo.FindByUser")
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			panic("Unexpected call to TransactionRepo.FindByUserAccount")
		},
	}
}

// NewFakeTransactionRepoDefaultFatal returns an instance of FakeTransactionRepo with all hooks configured to call t.Fatal
func NewFakeTransactionRepoDefaultFatal(t_sym21 TransactionRepoTestingT) *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			t_sym21.Fatal("Unexpected call to TransactionRepo.FindByUser")
			return
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			t_sym21.Fatal("Unexpected call to TransactionRepo.FindByUserAccount")
			return
		},
	}
}

// NewFakeTransactionRepoDefaultError returns an instance of FakeTransactionRepo with all hooks configured to call t.Error
func NewFakeTransactionRepoDefaultError(t_sym22 TransactionRepoTestingT) *FakeTransactionRepo {
	return &FakeTransactionRepo{
		FindByUserHook: func(uint) (ident1 []model.Transaction, ident2 error) {
			t_sym22.Error("Unexpected call to TransactionRepo.FindByUser")
			return
		},
		FindByUserAccountHook: func(uint, uint) (ident1 []model.Transaction, ident2 error) {
			t_sym22.Error("Unexpected call to TransactionRepo.FindByUserAccount")
			return
		},
	}
}

func (f *FakeTransactionRepo) Reset() {
	f.FindByUserCalls = []*TransactionRepoFindByUserInvocation{}
	f.FindByUserAccountCalls = []*TransactionRepoFindByUserAccountInvocation{}
}

func (f_sym23 *FakeTransactionRepo) FindByUser(userID uint) (ident1 []model.Transaction, ident2 error) {
	if f_sym23.FindByUserHook == nil {
		panic("TransactionRepo.FindByUser() called but FakeTransactionRepo.FindByUserHook is nil")
	}

	invocation_sym23 := new(TransactionRepoFindByUserInvocation)
	f_sym23.FindByUserCalls = append(f_sym23.FindByUserCalls, invocation_sym23)

	invocation_sym23.Parameters.UserID = userID

	ident1, ident2 = f_sym23.FindByUserHook(userID)

	invocation_sym23.Results.Ident1 = ident1
	invocation_sym23.Results.Ident2 = ident2

	return
}

// SetFindByUserStub configures TransactionRepo.FindByUser to always return the given values
func (f_sym24 *FakeTransactionRepo) SetFindByUserStub(ident1 []model.Transaction, ident2 error) {
	f_sym24.FindByUserHook = func(uint) ([]model.Transaction, error) {
		return ident1, ident2
	}
}

// SetFindByUserInvocation configures TransactionRepo.FindByUser to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym25 *FakeTransactionRepo) SetFindByUserInvocation(calls_sym25 []*TransactionRepoFindByUserInvocation, fallback_sym25 func() ([]model.Transaction, error)) {
	f_sym25.FindByUserHook = func(userID uint) (ident1 []model.Transaction, ident2 error) {
		for _, call_sym25 := range calls_sym25 {
			if reflect.DeepEqual(call_sym25.Parameters.UserID, userID) {
				ident1 = call_sym25.Results.Ident1
				ident2 = call_sym25.Results.Ident2

				return
			}
		}

		return fallback_sym25()
	}
}

// FindByUserCalled returns true if FakeTransactionRepo.FindByUser was called
func (f *FakeTransactionRepo) FindByUserCalled() bool {
	return len(f.FindByUserCalls) != 0
}

// AssertFindByUserCalled calls t.Error if FakeTransactionRepo.FindByUser was not called
func (f *FakeTransactionRepo) AssertFindByUserCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) == 0 {
		t.Error("FakeTransactionRepo.FindByUser not called, expected at least one")
	}
}

// FindByUserNotCalled returns true if FakeTransactionRepo.FindByUser was not called
func (f *FakeTransactionRepo) FindByUserNotCalled() bool {
	return len(f.FindByUserCalls) == 0
}

// AssertFindByUserNotCalled calls t.Error if FakeTransactionRepo.FindByUser was called
func (f *FakeTransactionRepo) AssertFindByUserNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 0 {
		t.Error("FakeTransactionRepo.FindByUser called, expected none")
	}
}

// FindByUserCalledOnce returns true if FakeTransactionRepo.FindByUser was called exactly once
func (f *FakeTransactionRepo) FindByUserCalledOnce() bool {
	return len(f.FindByUserCalls) == 1
}

// AssertFindByUserCalledOnce calls t.Error if FakeTransactionRepo.FindByUser was not called exactly once
func (f *FakeTransactionRepo) AssertFindByUserCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserCalls) != 1 {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times, expected 1", len(f.FindByUserCalls))
	}
}

// FindByUserCalledN returns true if FakeTransactionRepo.FindByUser was called at least n times
func (f *FakeTransactionRepo) FindByUserCalledN(n int) bool {
	return len(f.FindByUserCalls) >= n
}

// AssertFindByUserCalledN calls t.Error if FakeTransactionRepo.FindByUser was called less than n times
func (f *FakeTransactionRepo) AssertFindByUserCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserCalls) < n {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times, expected >= %d", len(f.FindByUserCalls), n)
	}
}

// FindByUserCalledWith returns true if FakeTransactionRepo.FindByUser was called with the given values
func (f_sym26 *FakeTransactionRepo) FindByUserCalledWith(userID uint) bool {
	for _, call_sym26 := range f_sym26.FindByUserCalls {
		if reflect.DeepEqual(call_sym26.Parameters.UserID, userID) {
			return true
		}
	}

	return false
}

// AssertFindByUserCalledWith calls t.Error if FakeTransactionRepo.FindByUser was not called with the given values
func (f_sym27 *FakeTransactionRepo) AssertFindByUserCalledWith(t TransactionRepoTestingT, userID uint) {
	t.Helper()
	var found_sym27 bool
	for _, call_sym27 := range f_sym27.FindByUserCalls {
		if reflect.DeepEqual(call_sym27.Parameters.UserID, userID) {
			found_sym27 = true
			break
		}
	}

	if !found_sym27 {
		t.Error("FakeTransactionRepo.FindByUser not called with expected parameters")
	}
}

// FindByUserCalledOnceWith returns true if FakeTransactionRepo.FindByUser was called exactly once with the given values
func (f_sym28 *FakeTransactionRepo) FindByUserCalledOnceWith(userID uint) bool {
	var count_sym28 int
	for _, call_sym28 := range f_sym28.FindByUserCalls {
		if reflect.DeepEqual(call_sym28.Parameters.UserID, userID) {
			count_sym28++
		}
	}

	return count_sym28 == 1
}

// AssertFindByUserCalledOnceWith calls t.Error if FakeTransactionRepo.FindByUser was not called exactly once with the given values
func (f_sym29 *FakeTransactionRepo) AssertFindByUserCalledOnceWith(t TransactionRepoTestingT, userID uint) {
	t.Helper()
	var count_sym29 int
	for _, call_sym29 := range f_sym29.FindByUserCalls {
		if reflect.DeepEqual(call_sym29.Parameters.UserID, userID) {
			count_sym29++
		}
	}

	if count_sym29 != 1 {
		t.Errorf("FakeTransactionRepo.FindByUser called %d times with expected parameters, expected one", count_sym29)
	}
}

// FindByUserResultsForCall returns the result values for the first call to FakeTransactionRepo.FindByUser with the given values
func (f_sym30 *FakeTransactionRepo) FindByUserResultsForCall(userID uint) (ident1 []model.Transaction, ident2 error, found_sym30 bool) {
	for _, call_sym30 := range f_sym30.FindByUserCalls {
		if reflect.DeepEqual(call_sym30.Parameters.UserID, userID) {
			ident1 = call_sym30.Results.Ident1
			ident2 = call_sym30.Results.Ident2
			found_sym30 = true
			break
		}
	}

	return
}

func (f_sym31 *FakeTransactionRepo) FindByUserAccount(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error) {
	if f_sym31.FindByUserAccountHook == nil {
		panic("TransactionRepo.FindByUserAccount() called but FakeTransactionRepo.FindByUserAccountHook is nil")
	}

	invocation_sym31 := new(TransactionRepoFindByUserAccountInvocation)
	f_sym31.FindByUserAccountCalls = append(f_sym31.FindByUserAccountCalls, invocation_sym31)

	invocation_sym31.Parameters.UserID = userID
	invocation_sym31.Parameters.AccountID = accountID

	ident1, ident2 = f_sym31.FindByUserAccountHook(userID, accountID)

	invocation_sym31.Results.Ident1 = ident1
	invocation_sym31.Results.Ident2 = ident2

	return
}

// SetFindByUserAccountStub configures TransactionRepo.FindByUserAccount to always return the given values
func (f_sym32 *FakeTransactionRepo) SetFindByUserAccountStub(ident1 []model.Transaction, ident2 error) {
	f_sym32.FindByUserAccountHook = func(uint, uint) ([]model.Transaction, error) {
		return ident1, ident2
	}
}

// SetFindByUserAccountInvocation configures TransactionRepo.FindByUserAccount to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (f_sym33 *FakeTransactionRepo) SetFindByUserAccountInvocation(calls_sym33 []*TransactionRepoFindByUserAccountInvocation, fallback_sym33 func() ([]model.Transaction, error)) {
	f_sym33.FindByUserAccountHook = func(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error) {
		for _, call_sym33 := range calls_sym33 {
			if reflect.DeepEqual(call_sym33.Parameters.UserID, userID) && reflect.DeepEqual(call_sym33.Parameters.AccountID, accountID) {
				ident1 = call_sym33.Results.Ident1
				ident2 = call_sym33.Results.Ident2

				return
			}
		}

		return fallback_sym33()
	}
}

// FindByUserAccountCalled returns true if FakeTransactionRepo.FindByUserAccount was called
func (f *FakeTransactionRepo) FindByUserAccountCalled() bool {
	return len(f.FindByUserAccountCalls) != 0
}

// AssertFindByUserAccountCalled calls t.Error if FakeTransactionRepo.FindByUserAccount was not called
func (f *FakeTransactionRepo) AssertFindByUserAccountCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) == 0 {
		t.Error("FakeTransactionRepo.FindByUserAccount not called, expected at least one")
	}
}

// FindByUserAccountNotCalled returns true if FakeTransactionRepo.FindByUserAccount was not called
func (f *FakeTransactionRepo) FindByUserAccountNotCalled() bool {
	return len(f.FindByUserAccountCalls) == 0
}

// AssertFindByUserAccountNotCalled calls t.Error if FakeTransactionRepo.FindByUserAccount was called
func (f *FakeTransactionRepo) AssertFindByUserAccountNotCalled(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) != 0 {
		t.Error("FakeTransactionRepo.FindByUserAccount called, expected none")
	}
}

// FindByUserAccountCalledOnce returns true if FakeTransactionRepo.FindByUserAccount was called exactly once
func (f *FakeTransactionRepo) FindByUserAccountCalledOnce() bool {
	return len(f.FindByUserAccountCalls) == 1
}

// AssertFindByUserAccountCalledOnce calls t.Error if FakeTransactionRepo.FindByUserAccount was not called exactly once
func (f *FakeTransactionRepo) AssertFindByUserAccountCalledOnce(t TransactionRepoTestingT) {
	t.Helper()
	if len(f.FindByUserAccountCalls) != 1 {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times, expected 1", len(f.FindByUserAccountCalls))
	}
}

// FindByUserAccountCalledN returns true if FakeTransactionRepo.FindByUserAccount was called at least n times
func (f *FakeTransactionRepo) FindByUserAccountCalledN(n int) bool {
	return len(f.FindByUserAccountCalls) >= n
}

// AssertFindByUserAccountCalledN calls t.Error if FakeTransactionRepo.FindByUserAccount was called less than n times
func (f *FakeTransactionRepo) AssertFindByUserAccountCalledN(t TransactionRepoTestingT, n int) {
	t.Helper()
	if len(f.FindByUserAccountCalls) < n {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times, expected >= %d", len(f.FindByUserAccountCalls), n)
	}
}

// FindByUserAccountCalledWith returns true if FakeTransactionRepo.FindByUserAccount was called with the given values
func (f_sym34 *FakeTransactionRepo) FindByUserAccountCalledWith(userID uint, accountID uint) bool {
	for _, call_sym34 := range f_sym34.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym34.Parameters.UserID, userID) && reflect.DeepEqual(call_sym34.Parameters.AccountID, accountID) {
			return true
		}
	}

	return false
}

// AssertFindByUserAccountCalledWith calls t.Error if FakeTransactionRepo.FindByUserAccount was not called with the given values
func (f_sym35 *FakeTransactionRepo) AssertFindByUserAccountCalledWith(t TransactionRepoTestingT, userID uint, accountID uint) {
	t.Helper()
	var found_sym35 bool
	for _, call_sym35 := range f_sym35.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym35.Parameters.UserID, userID) && reflect.DeepEqual(call_sym35.Parameters.AccountID, accountID) {
			found_sym35 = true
			break
		}
	}

	if !found_sym35 {
		t.Error("FakeTransactionRepo.FindByUserAccount not called with expected parameters")
	}
}

// FindByUserAccountCalledOnceWith returns true if FakeTransactionRepo.FindByUserAccount was called exactly once with the given values
func (f_sym36 *FakeTransactionRepo) FindByUserAccountCalledOnceWith(userID uint, accountID uint) bool {
	var count_sym36 int
	for _, call_sym36 := range f_sym36.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym36.Parameters.UserID, userID) && reflect.DeepEqual(call_sym36.Parameters.AccountID, accountID) {
			count_sym36++
		}
	}

	return count_sym36 == 1
}

// AssertFindByUserAccountCalledOnceWith calls t.Error if FakeTransactionRepo.FindByUserAccount was not called exactly once with the given values
func (f_sym37 *FakeTransactionRepo) AssertFindByUserAccountCalledOnceWith(t TransactionRepoTestingT, userID uint, accountID uint) {
	t.Helper()
	var count_sym37 int
	for _, call_sym37 := range f_sym37.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym37.Parameters.UserID, userID) && reflect.DeepEqual(call_sym37.Parameters.AccountID, accountID) {
			count_sym37++
		}
	}

	if count_sym37 != 1 {
		t.Errorf("FakeTransactionRepo.FindByUserAccount called %d times with expected parameters, expected one", count_sym37)
	}
}

// FindByUserAccountResultsForCall returns the result values for the first call to FakeTransactionRepo.FindByUserAccount with the given values
func (f_sym38 *FakeTransactionRepo) FindByUserAccountResultsForCall(userID uint, accountID uint) (ident1 []model.Transaction, ident2 error, found_sym38 bool) {
	for _, call_sym38 := range f_sym38.FindByUserAccountCalls {
		if reflect.DeepEqual(call_sym38.Parameters.UserID, userID) && reflect.DeepEqual(call_sym38.Parameters.AccountID, accountID) {
			ident1 = call_sym38.Results.Ident1
			ident2 = call_sym38.Results.Ident2
			found_sym38 = true
			break
		}
	}

	return
}
